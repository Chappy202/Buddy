const { Listener } = require('discord-akairo');

module.exports = class emptyQueueListener extends Listener {
    constructor() {
        super('songChanged', {
            emitter: 'musicHandler',
            event: 'songChanged'
        });
    }

    async exec(message, oldSong, newSong, skipped, repeatMode) {
        if (repeatMode){
            let embed = new this.client.util.embed()
                .setColor(process.env.BASECOLOR)
                .setTitle(`Playing (Looping) ➤ ${newSong.name}`)
                .setURL(`${newSong.url}`)
                .setDescription(`Duration: ${newSong.duration}\nAuthor: ${newSong.author}\nRepeat: true`)
                .setThumbnail(`${newSong.thumbnail}`)
                .setTimestamp()
                .setFooter(`Req by: ${newSong.requestedBy}`);
            return message.util.send(embed);
        } else if (skipped != null) {
            let embed = new this.client.util.embed()
                .setColor(process.env.BASECOLOR)
                .setTitle(`Skipped ➤ ${skipped.name}`)
                .setURL(`${skipped.url}`)
                .setDescription(`Next: ${newSong.name}\nDuration: ${newSong.duration}\nAuthor: ${newSong.author}`)
                .setThumbnail(`${newSong.thumbnail}`)
                .setTimestamp()
                .setFooter(`Req by: ${skipped.requestedBy}`);
            return message.util.send(embed);
        } else {
            let embed = new this.client.util.embed()
                .setColor(process.env.BASECOLOR)
                .setTitle(`Playing ➤ ${newSong.name}`)
                .setURL(`${newSong.url}`)
                .setDescription(`Duration: ${newSong.duration}\nAuthor: ${newSong.author}\nPrevious Song: ${oldSong.name}`)
                .setThumbnail(`${newSong.thumbnail}`)
                .setTimestamp()
                .setFooter(`Req by: ${newSong.requestedBy}`);
            return message.util.send(embed);
        }

    }
}